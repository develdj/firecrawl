name: firecrawl

x-common-service: &common-service
  # NOTE: If you don't want to build the service locally,
  # uncomment the image: statement and comment out the build: statement
  # image: ghcr.io/mendableai/firecrawl:latest
  build: apps/api
  ulimits:
    nofile:
      soft: 65535
      hard: 65535
  extra_hosts:
    - "host.docker.internal:host-gateway"
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

x-common-env: &common-env
  # Redis Configuration
  REDIS_URL: ${REDIS_URL:-redis://redis:6379}
  REDIS_RATE_LIMIT_URL: ${REDIS_URL:-redis://redis:6379}
  
  # Playwright Configuration
  PLAYWRIGHT_MICROSERVICE_URL: ${PLAYWRIGHT_MICROSERVICE_URL:-http://playwright-service:3000/scrape}
  
  # Authentication
  USE_DB_AUTHENTICATION: ${USE_DB_AUTHENTICATION:-false}
  BULL_AUTH_KEY: ${BULL_AUTH_KEY}
  TEST_API_KEY: ${TEST_API_KEY}
  
  # LLM Configuration (Ollama/OpenAI)
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  OPENAI_BASE_URL: ${OPENAI_BASE_URL}
  MODEL_NAME: ${MODEL_NAME}
  MODEL_EMBEDDING_NAME: ${MODEL_EMBEDDING_NAME}
  OLLAMA_BASE_URL: ${OLLAMA_BASE_URL}
  
  # Analytics & Monitoring
  POSTHOG_API_KEY: ${POSTHOG_API_KEY}
  POSTHOG_HOST: ${POSTHOG_HOST}
  SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
  
  # Supabase Configuration
  SUPABASE_ANON_TOKEN: ${SUPABASE_ANON_TOKEN}
  SUPABASE_URL: ${SUPABASE_URL}
  SUPABASE_SERVICE_TOKEN: ${SUPABASE_SERVICE_TOKEN}
  
  # Search Configuration
  SERPER_API_KEY: ${SERPER_API_KEY}
  SEARCHAPI_API_KEY: ${SEARCHAPI_API_KEY}
  SEARXNG_ENDPOINT: ${SEARXNG_ENDPOINT}
  SEARXNG_ENGINES: ${SEARXNG_ENGINES}
  SEARXNG_CATEGORIES: ${SEARXNG_CATEGORIES}
  
  # Proxy Configuration
  PROXY_SERVER: ${PROXY_SERVER}
  PROXY_USERNAME: ${PROXY_USERNAME}
  PROXY_PASSWORD: ${PROXY_PASSWORD}
  
  # Other Configuration
  SELF_HOSTED_WEBHOOK_URL: ${SELF_HOSTED_WEBHOOK_URL}
  LOGGING_LEVEL: ${LOGGING_LEVEL:-info}
  
  # Timeout Configuration
  SCRAPE_TIMEOUT: ${SCRAPE_TIMEOUT:-120000}
  REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-120000}
  BULL_JOB_TIMEOUT: ${BULL_JOB_TIMEOUT:-300000}

services:
  # Redis - Data store and queue backend
  redis:
    image: redis:alpine
    # image: valkey/valkey:alpine  # Alternative: Valkey (Redis fork)
    command: redis-server --bind 0.0.0.0 --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Playwright Service - Browser automation
  playwright-service:
    # image: ghcr.io/mendableai/playwright-service:latest
    image: firecrawl-jetson:latest
    # build: apps/playwright-service-ts
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PORT: 3000
      PROXY_SERVER: ${PROXY_SERVER}
      PROXY_USERNAME: ${PROXY_USERNAME}
      PROXY_PASSWORD: ${PROXY_PASSWORD}
      BLOCK_MEDIA: ${BLOCK_MEDIA:-true}
      PLAYWRIGHT_TIMEOUT: ${PLAYWRIGHT_TIMEOUT:-60000}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Service - Main REST API
  api:
    <<: *common-service
    environment:
      <<: *common-env
      HOST: "0.0.0.0"
      PORT: ${INTERNAL_PORT:-3002}
      FLY_PROCESS_GROUP: app
      ENV: local
      NUM_WORKERS_PER_QUEUE: ${NUM_WORKERS_PER_QUEUE:-8}
    depends_on:
      redis:
        condition: service_healthy
      playwright-service:
        condition: service_healthy
    ports:
      - "${PORT:-3002}:${INTERNAL_PORT:-3002}"
    command: ["pnpm", "run", "start:production"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${INTERNAL_PORT:-3002}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Worker Service - Background job processor
  worker:
    <<: *common-service
    environment:
      <<: *common-env
      FLY_PROCESS_GROUP: worker
      ENV: local
      NUM_WORKERS_PER_QUEUE: ${NUM_WORKERS_PER_QUEUE:-8}
    depends_on:
      redis:
        condition: service_healthy
      playwright-service:
        condition: service_healthy
      api:
        condition: service_healthy
    command: ["pnpm", "run", "workers"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Bull Dashboard for queue monitoring
  bull-dashboard:
    image: nauverse/bull-board:latest
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - BULL_PREFIX=bull
      - USER_USERNAME=admin  # Optional authentication
      - USER_PASSWORD=secret
    ports:
      - "3003:3000"
    depends_on:
      - redis
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=bull-dashboard"

  # Firecrawl Playground UI
  playground:
    image: nginx:alpine
    ports:
      - "${PLAYGROUND_PORT:-3004}:80"
    restart: unless-stopped
    labels:
      - "firecrawl.service=playground"
      - "firecrawl.description=Local testing interface"
    command: |
      sh -c "echo '<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firecrawl Local Playground</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 2px solid #ff6b6b;
            padding-bottom: 10px;
        }
        .input-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        textarea {
            min-height: 100px;
            font-family: monospace;
        }
        button {
            background: #ff6b6b;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background: #ff5252;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .result {
            margin-top: 30px;
            padding: 20px;
            background: #f8f8f8;
            border-radius: 5px;
            border: 1px solid #e0e0e0;
        }
        .result h3 {
            margin-top: 0;
            color: #333;
        }
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            background: #282c34;
            color: #abb2bf;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }
        .error {
            color: #e06c75;
            background: #ffeaea;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }
        .loading {
            color: #666;
            font-style: italic;
        }
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }
        .tab.active {
            border-bottom-color: #ff6b6b;
            color: #ff6b6b;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .format-options {
            display: flex;
            gap: 15px;
            margin: 10px 0;
        }
        .format-options label {
            display: flex;
            align-items: center;
            font-weight: normal;
            margin-bottom: 0;
        }
        .format-options input[type="checkbox"] {
            width: auto;
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ”¥ Firecrawl Local Playground</h1>
        
        <div class="tabs">
            <div class="tab active" onclick="switchTab('scrape')">Scrape</div>
            <div class="tab" onclick="switchTab('crawl')">Crawl</div>
            <div class="tab" onclick="switchTab('map')">Map</div>
        </div>

        <!-- Scrape Tab -->
        <div id="scrape-tab" class="tab-content active">
            <div class="input-group">
                <label for="scrape-url">URL to Scrape:</label>
                <input type="url" id="scrape-url" placeholder="https://example.com" value="http://www.ausiliari-tessili.com">
            </div>

            <div class="input-group">
                <label>Formats:</label>
                <div class="format-options">
                    <label><input type="checkbox" id="format-markdown" checked> Markdown</label>
                    <label><input type="checkbox" id="format-html"> HTML</label>
                    <label><input type="checkbox" id="format-rawHtml"> Raw HTML</label>
                    <label><input type="checkbox" id="format-extract"> Extract (LLM)</label>
                    <label><input type="checkbox" id="format-screenshot"> Screenshot</label>
                </div>
            </div>

            <div class="input-group" id="extract-options" style="display:none;">
                <label for="extract-prompt">Extract Prompt:</label>
                <textarea id="extract-prompt" placeholder="Extract the main content, title, and key information...">Extract the company name, main services, and contact information</textarea>
            </div>

            <div class="input-group">
                <label for="timeout">Timeout (ms):</label>
                <input type="number" id="timeout" value="120000" min="1000" max="300000">
            </div>

            <button onclick="scrapeUrl()">Scrape URL</button>
        </div>

        <!-- Crawl Tab -->
        <div id="crawl-tab" class="tab-content">
            <div class="input-group">
                <label for="crawl-url">URL to Crawl:</label>
                <input type="url" id="crawl-url" placeholder="https://example.com" value="http://www.ausiliari-tessili.com">
            </div>

            <div class="input-group">
                <label for="crawl-limit">Page Limit:</label>
                <input type="number" id="crawl-limit" value="5" min="1" max="100">
            </div>

            <div class="input-group">
                <label for="max-depth">Max Depth:</label>
                <input type="number" id="max-depth" value="2" min="1" max="10">
            </div>

            <button onclick="crawlUrl()">Start Crawl</button>
            <button onclick="checkCrawlStatus()" style="display:none;" id="check-status">Check Status</button>
        </div>

        <!-- Map Tab -->
        <div id="map-tab" class="tab-content">
            <div class="input-group">
                <label for="map-url">URL to Map:</label>
                <input type="url" id="map-url" placeholder="https://example.com" value="http://www.ausiliari-tessili.com">
            </div>

            <button onclick="mapUrl()">Map Website</button>
        </div>

        <div id="loading" class="loading" style="display:none;">Processing... This may take a moment with local LLM.</div>
        <div id="result" class="result" style="display:none;">
            <h3>Result:</h3>
            <pre id="result-content"></pre>
        </div>
    </div>

    <script>
        const API_BASE = 'http://localhost:3002';
        let currentCrawlId = null;

        // Show/hide extract options when checkbox is toggled
        document.getElementById('format-extract').addEventListener('change', function() {
            document.getElementById('extract-options').style.display = this.checked ? 'block' : 'none';
        });

        function switchTab(tab) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            
            // Show selected tab
            document.getElementById(`${tab}-tab`).classList.add('active');
            event.target.classList.add('active');
        }

        async function scrapeUrl() {
            const url = document.getElementById('scrape-url').value;
            const timeout = parseInt(document.getElementById('timeout').value);
            
            // Get selected formats
            const formats = [];
            if (document.getElementById('format-markdown').checked) formats.push('markdown');
            if (document.getElementById('format-html').checked) formats.push('html');
            if (document.getElementById('format-rawHtml').checked) formats.push('rawHtml');
            if (document.getElementById('format-extract').checked) formats.push('extract');
            if (document.getElementById('format-screenshot').checked) formats.push('screenshot');

            const body = {
                url,
                formats,
                timeout
            };

            // Add extract options if needed
            if (formats.includes('extract')) {
                body.extract = {
                    prompt: document.getElementById('extract-prompt').value
                };
            }

            await makeRequest('/v1/scrape', body);
        }

        async function crawlUrl() {
            const url = document.getElementById('crawl-url').value;
            const limit = parseInt(document.getElementById('crawl-limit').value);
            const maxDepth = parseInt(document.getElementById('max-depth').value);

            const body = {
                url,
                limit,
                maxDepth
            };

            const result = await makeRequest('/v1/crawl', body);
            if (result && result.id) {
                currentCrawlId = result.id;
                document.getElementById('check-status').style.display = 'inline-block';
                showResult({ message: `Crawl started! Job ID: ${currentCrawlId}`, ...result });
            }
        }

        async function checkCrawlStatus() {
            if (!currentCrawlId) return;
            await makeRequest(`/v1/crawl/${currentCrawlId}`, null, 'GET');
        }

        async function mapUrl() {
            const url = document.getElementById('map-url').value;
            await makeRequest('/v1/map', { url });
        }

        async function makeRequest(endpoint, body, method = 'POST') {
            const loading = document.getElementById('loading');
            const resultDiv = document.getElementById('result');
            const resultContent = document.getElementById('result-content');

            loading.style.display = 'block';
            resultDiv.style.display = 'none';

            try {
                const options = {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                    }
                };

                if (body && method !== 'GET') {
                    options.body = JSON.stringify(body);
                }

                const response = await fetch(`${API_BASE}${endpoint}`, options);
                const data = await response.json();

                loading.style.display = 'none';
                resultDiv.style.display = 'block';

                if (data.success === false) {
                    resultContent.innerHTML = `<div class="error">Error: ${data.error}</div>`;
                    if (data.details) {
                        resultContent.innerHTML += `<pre>${JSON.stringify(data.details, null, 2)}</pre>`;
                    }
                } else {
                    resultContent.textContent = JSON.stringify(data, null, 2);
                }

                return data;
            } catch (error) {
                loading.style.display = 'none';
                resultDiv.style.display = 'block';
                resultContent.innerHTML = `<div class="error">Request failed: ${error.message}</div>`;
            }
        }

        function showResult(data) {
            const resultDiv = document.getElementById('result');
            const resultContent = document.getElementById('result-content');
            resultDiv.style.display = 'block';
            resultContent.textContent = JSON.stringify(data, null, 2);
        }
    </script>
</body>
</html>
' > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'"

  # Bull Board - Queue monitoring dashboard (Optional)
  #bull-board:
  #  image: deadly0/bull-board:latest
  #  environment:
  #    REDIS_HOST: redis
  #    REDIS_PORT: 6379
  #    REDIS_PASSWORD: ${REDIS_PASSWORD}
      # If you want to add authentication to Bull Board
      # USERNAME: ${BULL_BOARD_USERNAME:-admin}
      # PASSWORD: ${BULL_BOARD_PASSWORD:-admin}
  #  ports:
  #    - "${BULL_BOARD_PORT:-3003}:3000"
  #  depends_on:
  #    - redis
  #  restart: unless-stopped
  #  labels:
  #    - "firecrawl.service=monitoring"
  #    - "firecrawl.description=Queue monitoring dashboard"

  # Ollama Proxy (Optional - for better Docker networking with Ollama)
  # Uncomment if you have issues connecting to Ollama from containers
  # ollama-proxy:
  #   image: alpine/socat:latest
  #   command: TCP-LISTEN:11434,fork TCP-CONNECT:host.docker.internal:11434
  #   restart: unless-stopped
  #   labels:
  #     - "firecrawl.service=proxy"
  #     - "firecrawl.description=Ollama connection proxy"

volumes:
  redis-data:
    driver: local
    labels:
      - "firecrawl.volume=redis"
      - "firecrawl.description=Redis persistent data"
